name: Deploy to Edge

on: 
  push: 
    branches: [develop]
  pull_request:
    branches: [develop]

jobs: 
  linters:
    runs-on: ubuntu-18.04
    timeout-minutes: 10
    name: Linters
    steps:
      - name: Check out repository
        uses: actions/checkout@v2
      # Setup python -> 3.8.0
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: "3.8.0"
          cache: pipenv
      # Setup git credentials
      - name: Setup ssh key for git
        run: |
          mkdir -p /home/runner/.ssh
          ssh-keyscan -t rsa github.com > /home/runner/.ssh//known_hosts
          echo "$SSH_KEY" > /home/runner/.ssh/id_rsa
          chmod 400 /home/runner/.ssh/id_rsa
        env:
          SSH_KEY: ${{ secrets.SSH }}
      # Install pipenv
      - name: Install pipenv
        run: pip install pipenv
      # cache Piplock
      - id: cache-pipenv
        uses: actions/cache@v2
        with:
          path: ${{ github.path }}
          key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}
      # Install dependencies
      - name: Install dependencies
        if: steps.cache-pipenv.outputs.cache-hit != 'true'
        run: pipenv install --deploy --dev
      # Run linters
      - name: Run linters
        run: |
          pipenv run black
          pipenv run gitlint
          pipenv run pylint
          pipenv run pydocstyle
  tests:
    runs-on: ubuntu-18.04
    timeout-minutes: 10
    name: Test and Coverage
    steps:
      - name: Check out repository
        uses: actions/checkout@v2
      # Setup python -> 3.8.0
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: "3.8.0"
          cache: pipenv
      # Setup git credentials
      - name: Setup ssh key for git
        run: |
          mkdir -p /home/runner/.ssh
          ssh-keyscan -t rsa github.com > /home/runner/.ssh//known_hosts
          echo "$SSH_KEY" > /home/runner/.ssh/id_rsa
          chmod 400 /home/runner/.ssh/id_rsa
        env:
          SSH_KEY: ${{ secrets.SSH }}
      # Install pipenv
      - name: Install pipenv
        run: pip install pipenv
      # cache Piplock
      - id: cache-pipenv
        uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}
          key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}
      # Install dependencies
      - name: Install dependencies
        if: steps.cache-pipenv.outputs.cache-hit != 'true'
        run: pipenv install --deploy --dev
      # Run pytest
      - name: Run pytest
        run: pipenv run pytest
      # Publish code coverage
      - name: Publish code coverage
        uses: paambaati/codeclimate-action@v3.0.0
        env:
          CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
          debug: true
  build-deploy:
    runs-on: ubuntu-18.04
    needs: [ linters, tests ]
    if: github.event.pull_request.merged == true && github.ref == 'refs/heads/develop'
    name: Build & Deploy
    steps:
      - name: Check out repository
        uses: actions/checkout@v2
      # Setup python -> 3.8.0
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: "3.8.0"
          cache: pipenv
      # Setup git credentials
      - name: Setup ssh key for git
        run: |
          mkdir -p /home/runner/.ssh
          ssh-keyscan -t rsa github.com > /home/runner/.ssh//known_hosts
          echo "$SSH_KEY" > /home/runner/.ssh/id_rsa
          chmod 400 /home/runner/.ssh/id_rsa
        env:
          SSH_KEY: ${{ secrets.SSH }}
      # Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'
      # Install AWS CDK
      - name: Install AWS CDK
        run: npm install -g aws-cdk
      # Install pipenv
      - name: Install pipenv
        run: pip install pipenv
      # cache Piplock
      - id: cache-pipenv
        uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}
          key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}
      # Install dependencies
      - name: Install dependencies
        if: steps.cache-pipenv.outputs.cache-hit != 'true'
        run: pipenv install --deploy --dev
      # Deploy
      - name: Deploy to AWS
        run: |
          pipenv run cdk deploy --all -c deployment_name=${{ secrets.DEPLOYMENT_NAME }}
        env:
          AWS_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      
